Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree {3,9,20,#,#,15,7},
::
   
     3
    / \
   9  20
     /  \
    15   7
   
But the following is not:
::

   [
     [3],
     [9,20],
     [15,7]
   ]

code:
::
 
  List<List<Integer>> lists = new LinkedList<List<Integer>>();
            if (root == null){return lists;}
            Queue<TreeNode> cur = new LinkedList<TreeNode>();
            Queue<TreeNode> nxt = new LinkedList<TreeNode>();
            Queue<TreeNode> exc = new LinkedList<TreeNode>();
            TreeNode treeNode;
            cur.add(root);
            while (!cur.isEmpty()){
                List<Integer> list = new LinkedList<Integer>();
                while (!cur.isEmpty()){
                    treeNode = cur.remove();
                    if (treeNode.left != null){
                        nxt.add(treeNode.left);
                    }
                    if (treeNode.right != null){
                        nxt.add(treeNode.right);
                    }
                    list.add(treeNode.val);
                }
                lists.add(list);
                exc = cur;
                cur = nxt;
                nxt = exc;
            }
            return lists;
        }
    }
