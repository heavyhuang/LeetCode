Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree {3,9,20,#,#,15,7},
::
    3
   / \
  9  20
    /  \
   15   7

return its bottom-up level order traversal as:
::
   [
   [15,7],
   [9,20],
   [3]
   ]

code:
::
 
      static public class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;
        TreeNode(int x) {
            val = x;
        }
    }
    static TreeNode treeNode = new TreeNode(1) ;
    static TreeNode treeNode2 = new TreeNode(2) ;
    public static void main(String[] args) {
        Solution solution = new Solution();
        treeNode.val = 1;
        treeNode.left = treeNode2;
        System.out.println(solution.levelOrderBottom(treeNode));
    }

    public static class Solution {
        public List<List<Integer>> levelOrderBottom(TreeNode root) {
            List<List<Integer>> list = new LinkedList<List<Integer>>();
            if (root == null){return list;}
            Queue<TreeNode> cur = new LinkedList<TreeNode>();
            Queue<TreeNode> nxt = new LinkedList<TreeNode>();
            Queue<TreeNode> exc = new LinkedList<TreeNode>();
            TreeNode tempNode;
            cur.add(root);
            while (!cur.isEmpty()) {
                List<Integer> tempList = new LinkedList<Integer>();
                while (!cur.isEmpty()) {
                    tempNode = cur.remove();
                    if (tempNode.left != null) {
                        nxt.add(tempNode.left);
                    }
                    if (tempNode.right != null) {
                        nxt.add(tempNode.right);
                    }
                    tempList.add(tempNode.val);
                }
                exc = cur;
                cur = nxt; //传值引用
                nxt = exc;
                System.out.println(nxt);
                //void add(int index, E element) 在列表的指定位置插入指定元素
                list.add(0,tempList);
            }
            return list;
        }

    }
