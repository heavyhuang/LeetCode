Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree is symmetric:
::
   
       1
      / \
     2   2
    / \ / \
   3  4 4  3
   
But the following is not:
::

      1
     / \
    2   2
     \   \
     3    3 

code:
::
 
  public static class Solution {
        public boolean isSymmetric(TreeNode root) {
            if (root == null){return true;}
            return isSame(root.left,root.right);
        }

        public boolean isSame(TreeNode left,TreeNode right){
            if (left == null && right == null){return true;}
            if (left != null && right == null){return false;}
            if (left == null && right != null){return false;}
            if (left.val != right.val){return false;}
            return isSame(left.left,right.right) && isSame(left.right,right.left);
        }
    }    
