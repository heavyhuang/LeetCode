 Implement the following operations of a stack using queues.

    push(x) -- Push element x onto stack.
    pop() -- Removes the element on top of the stack.
    top() -- Get the top element.
    empty() -- Return whether the stack is empty.

Notes:

    You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
    Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
    You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack).


code:
::
 
	class MyStack {
		Queue<Integer> queue1 = new LinkedList<Integer>();
		Queue<Integer> queue2 = new LinkedList<Integer>();
		int top_ans = 0;
		// Push element x onto stack.
		public void push(int x) {
		    queue1.add(x);
		}

		// Removes the element on top of the stack.
		public void pop() {
		    if (queue1.size() == 1){
		        queue1.poll();
		        return;
		    }
		    while (queue1.size()>1){
		        queue2.add(queue1.poll());
		    }
		    queue1.poll();
		    while (!queue2.isEmpty()){
		        queue1.add(queue2.poll());
		    }
		}

		// Get the top element.
		public int top() {
		    while (!queue1.isEmpty()){
		        top_ans = queue1.poll();
		        queue2.add(top_ans);
		    }
		    while (!queue2.isEmpty()){
		        queue1.add(queue2.poll());
		    }
		    return top_ans;
		}

		// Return whether the stack is empty.
		public boolean empty() {
		    return (queue1.isEmpty() && queue2.isEmpty());
		}
	}
